// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!

import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { ReactQueryDevtools } from "@tanstack/react-query-devtools";
import { ConfigProvider } from "antd";
import React, { lazy, Suspense } from "react";
import ReactDOM from "react-dom/client";
import { YDErrorBoundary } from "./YDErrorBoundary";
import { RouterProvider, createBrowserRouter } from "react-router-dom";
import { microProps, projectProps, queryClient, useGlobal } from "./index";
import zhCN from "antd/locale/zh_CN";
import enUS from "antd/locale/en_US";
import "./index.css";
// import './lang';
import "./xhook";
import { useTokenLogin, useRedirect, usePV, useEvent } from "./hooks";
import { I18nProvider } from "@xybot/i18n";

const appFile = (import.meta as any).glob("../App.tsx", {
  eager: true,
});
const app = appFile[Object.keys(appFile)[0]]?.default;

console.log("app", app);

const routeConfig = {};

const _routeSyncFiles = (import.meta as any).glob(
  "../../src/pages/**/index.tsx",
  { eager: true }
);
const _routeAsyncFiles = [];

const routeFiles = { ..._routeSyncFiles, ..._routeAsyncFiles };
const innerRouteFiles = (import.meta as any).glob(
  "../../src/.xybot/pages/**/index.tsx",
  {
    eager: true,
  }
);

const allRouteFiles = { ...routeFiles, ...innerRouteFiles };

console.log("routeFiles", routeFiles);
console.log("innerRouteFiles", innerRouteFiles);
console.log("microProps", microProps);

const LayoutFile = (import.meta as any).glob("../../src/Layout.tsx", {
  eager: true,
});
const Layout = LayoutFile[Object.keys(LayoutFile)[0]]?.default;

const handlePath = (path) => {
  console.log("handlePath", path);
  if (path === "home" || path === "index.tsx") {
    return "/";
  }
  if (path.includes("notFound")) {
    return path.replace("notFound", "*");
  }
  return path;
};

const RootPage = (props) => {
  const { checking } = useTokenLogin();
  usePV();
  useEvent();
  useRedirect(checking);

  if (checking) {
    return <></>;
  }

  return props.children;
};

const routes = Object.keys(allRouteFiles)
  .filter((key) => !key.includes("components"))
  .map((key) => {
    const paths = key.split("/");
    const path = paths.slice(2, -1).reduce((acc, path) => {
      return acc + `/${path}`;
    }, "");
    const Page = _routeAsyncFiles[key]
      ? lazy(allRouteFiles[key] as any)
      : allRouteFiles[key]?.default;
    const setting =
      (allRouteFiles[key] as any).setting || routeConfig[path] || {};
    const useLayout = !!(setting?.layout !== false && Layout);
    const fallback = setting?.fallback ?? null;
    const Comps = _routeAsyncFiles[key] ? (
      <Suspense fallback={fallback}>
        <Page />
      </Suspense>
    ) : (
      <Page />
    );
    return {
      path: handlePath(path),
      errorElement: <YDErrorBoundary />,
      element: (
        <RootPage>{useLayout ? <Layout>{Comps}</Layout> : Comps}</RootPage>
      ),
    };
  });
const afterRoutes = app?.afterRoutes ? app?.afterRoutes(routes) : routes;
console.log("afterRoutes", afterRoutes);

const router = createBrowserRouter(afterRoutes, {
  basename: projectProps.baseroute || microProps.baseroute,
});

const App = () => {
  const { Global } = useGlobal();
  console.log("Global", Global);

  return (
    <ConfigProvider
      {...{
        prefixCls: microProps?.appName || "",
        locale: Global.lang?.includes("zh") ? zhCN : enUS,
        theme: {
          token: { colorPrimary: microProps?.theme?.colorPrimary || "#ff525b" },
        },
        ...app?.antd,
      }}
    >
      <I18nProvider>
        <RouterProvider router={router} />
      </I18nProvider>
    </ConfigProvider>
  );
};

ReactDOM.createRoot(document.getElementById("root") as HTMLElement).render(
  <QueryClientProvider client={queryClient}>
    <App />
    <ReactQueryDevtools />
  </QueryClientProvider>
);
